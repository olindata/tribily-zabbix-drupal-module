<?php
// $Id: zabbix_bridge.module,v 1.20 2009/07/02 03:41:42 rmiddle Exp $
// Built for Drupal 6

/**
 * @file
 * Notifies administrator of new user registrations.
 */

/**
 * Implementation of hook_help().
 */
function zabbix_bridge_help($path, $arg) {
  if ($path == 'admin/help#zabbix_bridge') {
    return '<p>'.
      t('This module provides various integration between drupal and Zabbix.') .
      '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function zabbix_bridge_menu() {
  $items['admin/settings/zabbix_bridge'] = array(
    'title' => 'Zabbix Bridge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zabbix_bridge_settings'),
    'description' => 'Configure the Zabbix Bridge module.',
    'file' => 'zabbix_bridge.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  // raj: add hosts tab for host related options
  $items['user/%user/hosts'] = array(
    'title' => 'Hosts',
    'page callback' => 'zabbix_hosts',
    'page arguments' => array('zabbix_hosts_form'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    //'load arguments' => array('%map', '%index'),
    'file' => 'zabbix_bridge.hosts.inc',
  );

  return $items;
}


/**
 * Implementation of hook_user().
 */
function zabbix_bridge_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      zabbix_bridge_create_zabbix_user($edit, $account, $category);
      break;
    case 'delete':
      zabbix_bridge_delete_zabbix_user($edit, $account, $category);
      break;
    case 'update':
      zabbix_bridge_update_zabbix_user($edit, $account, $category);
      break;
  }
}

/**
 * for printing out debugging info, use this instead of echo and what not.
 */
function echo_debug($msg) {
    // print the message only if debug is enabled!
    if ("yes" == variable_get('zabbix_bridge_debug', 'no')) {

            /*if (is_string($msg))
                echo $msg;
            else*/
            // var_dump() for now, echo won't prevent page redirects
            var_dump($msg);
            
    }
}

include_once 'ZabbixAPI.class.php';

function zabbix_bridge_update_zabbix_user($edit, $account, $category) {

    // This logs into Zabbix, and returns false if it fails
    ZabbixAPI::login('http://zabbix-dev.tribily.com/','admin','zabbix')
        or die('Unable to login: '.print_r(ZabbixAPI::getLastError(),true));

    // This gets the version of the zabbix server
    $version = ZabbixAPI::fetch_string('apiinfo','version')
        or die('Unable to get Zabbix Version: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Server running Zabbix API Version: $version\n");
    
    echo_debug($edit);
    echo_debug($account);
    echo_debug($category);

    // retrieve drupal-zabbix associations - CONSIDER REVISING AND USING ZABBIX API INSTEAD!
    $result = db_query('SELECT * FROM drupal_zabbix WHERE drupal_uid=%s', $account->uid)
            or die('Unable to retrieve drupal-zabbix associations');

    $data = db_fetch_array($result);

    // update user details
    $user = array(  'userid' => $data['zabbix_uid'],
                    'alias' => $edit['name'],
                    'passwd' => $edit['pass']   );

    echo_debug($user);

    $updatedusers = ZabbixAPI::fetch_string('user', 'update', array($user))
            or die('Unable to update zabbix user profile: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Updated Zabbix user:\n");

    echo_debug($updatedusers);

    // get user media
    $usermedia = ZabbixAPI::fetch_array('user', 'getMedia', array ( 'userids' => array( $data['zabbix_uid'] ),
                                                                    'mediatypeid' => 1,
                                                                    'sendto' => $account->mail
                                                            ))
            or die('Unable to fetch zabbix user media: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Retrieved Zabbix user media:\n");

    echo_debug(print_r($usermedia, true));

    // delete existing and relevant media before adding
    $deletedmedia = ZabbixAPI::fetch_string('user', 'deleteMedia', $usermedia)
            or die('Unable to delete zabbix user media: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Deleted Zabbix user media:\n");

    echo_debug(print_r($deletedmedia, true));

    // add updated user media
    /*
     * media types:
     *
     * 1 - Email
     * 2 - Jabber
     * 3 - SMS
     *
     * Refer to table `media_type` for more details
     *
     */
    $media_data = array();

    $media_data['users'] = array( 'userid' => $data['zabbix_uid']   );

    $media_data['medias'] = array(  'mediatypeid' => 1, 'sendto' => $edit['mail'],
                                    'active' => 0, 'severity' => 63,
                                    'period' => '1-7,00:00-23:59;'  );

    $updatedmedia = ZabbixAPI::fetch_string('user', 'addMedia', $media_data)
            or die('Unable to update zabbix user media: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Updated Zabbix user media:\n");

    echo_debug(print_r($updatedmedia, true));

    // update usergroup details
    $usergroup = array( 'usrgrpid' => $data['zabbix_usrgrp_id'],
                        'name' => $edit['name']);

    $updatedusergroups = ZabbixAPI::fetch_string('usergroup', 'update', array($usergroup))
            or die('Unable to update zabbix usergroup: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Updated Zabbix usergroup:\n");

    echo_debug(print_r($updatedusergroups, true));

    // update hostgroup details
    $hostgroup = array( 'groupid' => $data['zabbix_hostgrp_id'],
                        'name' => $edit['name']);

    $updatedhostgroups = ZabbixAPI::fetch_string('hostgroup', 'update', array($hostgroup))
            or die('Unable to update zabbix hostgroup: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Updated Zabbix hostgroup:\n");

    echo_debug(print_r($updatedhostgroups, true));

}


function zabbix_bridge_delete_zabbix_user($edit, $account, $category) {
    echo_debug($edit);
    echo_debug($account);
    echo_debug($category);

    // This logs into Zabbix, and returns false if it fails
    ZabbixAPI::login('http://zabbix-dev.tribily.com/','admin','zabbix')
        or die('Unable to login: '.print_r(ZabbixAPI::getLastError(),true));

    // This gets the version of the zabbix server
    $version = ZabbixAPI::fetch_string('apiinfo','version')
        or die('Unable to get Zabbix Version: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Server running Zabbix API Version: $version\n");    
  
    //get the zabbix user - consider revising, shows all ids
    /*$userinfo = ZabbixAPI::fetch_array('user', 'get', array( 'pattern' => $edit['name']))
        or die('Unable to delete user: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Zabbix get user info:\n";
    echo_debug(print_r($userinfo, true));*/

    if ("yes" == variable_get('zabbix_bridge_trace', 'no')) {

        echo_debug('Delete zabbix trace set to yes, deleting zabbix traces as well ...' . "\n");

        // retrieve drupal-zabbix associations - CONSIDER REVISING AND USING ZABBIX API INSTEAD!
        $result = db_query('SELECT * FROM drupal_zabbix WHERE drupal_uid=%s', $account->uid)
                or die('Unable to retrieve drupal-zabbix associations');

        $data = db_fetch_array($result);

        $zabbixuserid = $data['zabbix_uid'];
        $hostgroupid = $data['zabbix_hostgrp_id'];
        $usergroupid = $data['zabbix_usrgrp_id'];

        $result = db_query('DELETE FROM drupal_zabbix WHERE drupal_uid=%s', $account->uid);

        //delete the user from zabbix (deletes media as well)
        $deletedusers = ZabbixAPI::fetch_array('user', 'delete', array( 'userid' => $zabbixuserid))
            or die('Unable to delete user: '.print_r(ZabbixAPI::getLastError(),true));
        echo_debug("Zabbix user deleted:\n");
        echo_debug(print_r($deletedusers, true));

        // delete the user's hostgroup
        $deletedhostgroups = ZabbixAPI::fetch_array('hostgroup', 'delete', array(array('groupid' => $hostgroupid)))
                or die('Unable to delete hostgroup: '.print_r(ZabbixAPI::getLastError(),true));
        echo_debug("Zabbix hostgroup deleted:\n");
        echo_debug(print_r($deletedhostgroups, true));

        // delete the user's usergroup
        $deletedusergroups = ZabbixAPI::fetch_array('usergroup', 'delete', array(array('usrgrpid' => $usergroupid)))
                or die('Unable to delete hostgroup: '.print_r(ZabbixAPI::getLastError(),true));
        echo_debug("Zabbix usergroup deleted:\n");
        echo_debug(print_r($deletedusergroups, true));

    }

    // remove actions
    $actionids = ZabbixAPI::fetch_array('action', 'get', array ( 'pattern' => $account->name))
            or die('Unable to retrieve actions: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Zabbix actions retrieved:\n");
    echo_debug(print_r($actionids, true));

    $deletedactions = ZabbixAPI::fetch_array('action', 'delete', $actionids)
            or die('Unable to delete actions: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Zabbix actions deleted:\n");
    echo_debug(print_r($deletedactions, true));

    // remove hosts
    $hostparams = array( 'groupids' => $hostgroupid );

    $hostids = ZabbixAPI::fetch_array('host', 'get', $hostparams)
            or die('Unable to retrieve hosts: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Zabbix hosts retrieved:\n");
    echo_debug(print_r($hostids, true));

    $deletedhosts = ZabbixAPI::fetch_array('host', 'delete', $hostids)
            or die('Unable to delete hosts: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug("Zabbix hosts deleted:\n");
    echo_debug(print_r($deletedhosts, true));
    
}

function zabbix_bridge_create_zabbix_user($edit, $account, $category) {

    // This logs into Zabbix, and returns false if it fails
    ZabbixAPI::login('http://zabbix-dev.tribily.com/','admin','zabbix')
        or die('Unable to login: '.print_r(ZabbixAPI::getLastError(),true));

    // This gets the version of the zabbix server
    $version = ZabbixAPI::fetch_string('apiinfo','version')
        or die('Unable to get Zabbix Version: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Server running Zabbix API Version: $version\n");

    //create the usergroup
    $zabbixusergroupid = ZabbixAPI::fetch_string('usergroup', 'create', array(array('name' => $edit['name'])))
        or die('Unable to create zabbix user group: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Zabbix usergroup created: ".$zabbixusergroupid."\n");

    //create the user
    $zabbixuserid = ZabbixAPI::fetch_string('user', 'create', array(   'email' => $edit['mail'],
                                                       'alias'=>$edit['name'],
                                                       'passwd'=>$edit['pass'],
                                                       'number_of_hosts'=>0)) //number_of_hosts is added because of a bug in API 1.2
        or die('Unable to create zabbix user: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Zabbix user created: ".$zabbixuserid."\n");

    echo_debug(print_r($zabbixusergroupid, true));
    echo_debug(print_r($zabbixuserid, true));

    //add user to usergroup
    ZabbixAPI::fetch_string('usergroup', 'updateUsers', array(  'usrgrps' => array('usrgrpid' => $zabbixusergroupid),
                                                               'users' => array('userid' => $zabbixuserid)))
        or die('Unable to add user to usergroup: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Zabbix user added to usergroup: ".$zabbixuserid."\n");


    //add the email address to it's media
    $medias = ZabbixAPI::fetch_array('user', 'addMedia', array( 'users' => array('userid' => $zabbixuserid), 'medias' => array('mediatypeid' => 1, 'sendto' => $edit['mail'], 'active' => 0, 'severity' => 63, 'period' => '1-7,00:00-23:59;')))
        or die('Unable to add media to user: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Media added to zabbix user:\n".print_r($medias)."\n");


    // create the hostgroup
    $zabbixhostgroupid = ZabbixAPI::fetch_string('hostgroup', 'create', array(array('name' => $edit['name'])))
            or die('Unable to create zabbix user group: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug("Zabbix hostgroup created: $zabbixhostgroupid\n");

    // set allow rights for usergroup for hostgroup
    $allowrights = ZabbixAPI::fetch_array('usergroup', 'addRights', array(  'usrgrpid' => $zabbixusergroupid,
                                                                            'rights' => array( array(   'permission' => 3,
                                                                                                        'id' => $zabbixhostgroupid
                                                                                                )
                                                                                            )
                                                                        ))
            or die('Unable to create allow rights for zabbix usergroup: '.print_r(ZabbixAPI::getLastError(),true));
    echo_debug('Zabbix allow rights created: ');
    
    echo_debug(print_r($allowrights, true));

    // associate the drupal uid to its relevant zabbix ids
    zabbix_bridge_drupal_to_zabbix($account->uid, $zabbixuserid, $zabbixusergroupid, $zabbixhostgroupid)
            or die('Unable to create drupal-zabbix association');

    // get other zabbix hostgroups
    $otherhostgroups = ZabbixAPI::fetch_array('hostgroup', 'get')
            or die('Unable to get other zabbix hostgroups: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug(print_r($otherhostgroups, true));

    foreach ($otherhostgroups as $otherhostgroup) {

        $curr_id = $otherhostgroup['groupid'];

        if ($curr_id == $zabbixhostgroupid)
            continue;

        // set deny rights for usergroup for other hostgroup
        $denyrights = ZabbixAPI::fetch_array('usergroup', 'addRights', array(  'usrgrpid' => $zabbixusergroupid,
                                                                            'rights' => array( array(   'permission' => 0,
                                                                                                        'id' => $curr_id)
                                                                                            )
                                                                        ))
            or die("Unable to create deny rights for zabbix usergroup $zabbixusergroupid to hostgroup $curr_id: ".print_r(ZabbixAPI::getLastError(),true));

        echo_debug('Zabbix usergroup-hostgroup deny rights created:');
        echo_debug(print_r($denyrights, true));

    }
    
    // get other zabbix usergroups
    $otherusergroups = ZabbixAPI::fetch_array('usergroup', 'get')
            or die('Unable to get other zabbix usergroups: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug(print_r($otherusergroups, true));
    
    foreach ($otherusergroups as $otherusergroup) {

        $curr_id = $otherusergroup['usrgrpid'];

        if ($curr_id == $zabbixusergroupid)
            continue;

        // set deny rights for other hostgroup to this usergroup
        $denyrights = ZabbixAPI::fetch_array('usergroup', 'addRights', array(  'usrgrpid' => $curr_id,
                                                                            'rights' => array( array(   'permission' => 0,
                                                                                                        'id' => $zabbixhostgroupid)
                                                                                            )
                                                                        ))
            or die("Unable to create deny rights for zabbix hostgroup $curr_id to usergroup $zabbixusergroupid: ".print_r(ZabbixAPI::getLastError(),true));

        echo_debug('Zabbix hostgroup-usergroup deny rights created:');
        echo_debug(print_r($denyrights, true));

    }

    // create the action
    $actionparams = array();

    // still needs testing/completing
    $actionparams[] = array(    'name' => $edit['name'],
                                'evaltype' => 0, // ACTION_EVAL_TYPE_AND_OR
                                'operations' => array ( array(  'object' => 1, // OPERATION_OBJECT_GROUP
                                                                'objectid' => $zabbixusergroupid,
                                                                'operationtype' => 0, // OPERATION_TYPE_MESSAGE
                                                                'shortdata' => '{TRIGGER.NAME}: {STATUS}', // ACTION_DEFAULT_MSG
                                                                'longdata' => '{TRIGGER.NAME}: {STATUS}', // ACTION_DEFAULT_MSG
                                                                'default_msg' => 1,
                                                                'mediatypeid' => 1, // email
                                                                'esc_period' => 0,
                                                                'esc_step_from' => 1,
                                                                'esc_step_to' => 1,
                                                                'evaltype' => 0
                                                            )
                                                       ),
                                'conditions' => array ( array(  'conditiontype' => 4, // CONDITION_TYPE_TRIGGER_SEVERITY
                                                                'value' => 2, // TRIGGER_SEVERITY_WARNING
                                                                'operator' => 5 // CONDITION_OPERATOR_MORE_EQUAL
                                                        )
                                                    ),
                                'eventsource' => 0, //EVENT_SOURCE_TRIGGERS
                                'def_shortdata' => '{TRIGGER.NAME}: {STATUS}', // ACTION_DEFAULT_MSG
                                'def_longdata' => '{TRIGGER.NAME}: {STATUS}', // ACTION_DEFAULT_MSG
                                'r_shortdata' => '{TRIGGER.NAME}: {STATUS}', // ACTION_DEFAULT_MSG
                                'r_longdata' => '{TRIGGER.NAME}: {STATUS}', // ACTION_DEFAULT_MSG
                                'status' => 0, // ACTION_STATUS_ENABLED,
                                'recovery_msg' => 1
                            );

    $actionids = ZabbixAPI::fetch_string('action', 'create', $actionparams)
            or die('Unable to create zabbix action: '.print_r(ZabbixAPI::getLastError(),true));

    echo_debug('Zabbix action created:');
    echo_debug(print_r($actionids, true));

    // add condition: trigger on severity >= warning

}

function zabbix_bridge_drupal_to_zabbix($drupal_uid, $zabbix_uid, $zabbixusrgrpid, $zabbixhostgrpid) {
    
    echo_debug(print_r($drupal_uid, true));
    echo_debug(print_r($zabbix_uid, true));
    echo_debug(print_r($zabbixusrgrpid, true));
    echo_debug(print_r($zabbixhostgrpid, true));

    $sql = 'INSERT INTO drupal_zabbix (drupal_uid, zabbix_uid, zabbix_usrgrp_id, zabbix_hostgrp_id)';
    $sql .= " VALUES('%s', '%s', '%s', '%s')";

    $result = db_query($sql, $drupal_uid, $zabbix_uid, $zabbixusrgrpid, $zabbixhostgrpid);

    return $result;

}